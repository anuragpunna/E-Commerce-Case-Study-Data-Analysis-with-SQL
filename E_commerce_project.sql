-- 1. Customer Insights: Understanding the Customer Base
-- Query: Count the number of customers from each location.

SELECT 
    location, 
    COUNT(customer_id) AS customer_count
FROM 
    Customers
GROUP BY 
    location
ORDER BY 
    customer_count DESC;

-- 2. Product Analysis: Evaluating Product Performance
-- Query: Find the top 5 best-selling products based on total quantity sold.

SELECT 
    p.product_id, 
    p.name AS product_name, 
    SUM(od.quantity) AS total_quantity_sold
FROM 
    Products p
JOIN 
    OrderDetails od ON p.product_id = od.product_id
GROUP BY 
    p.product_id, p.name
ORDER BY 
    total_quantity_sold DESC
LIMIT 5;

-- 3. Sales Optimization: Identify Monthly Sales Trends
-- Query: Calculate total sales for each month.

SELECT 
    STRFTIME('%Y-%m', o.order_date) AS sales_month, 
    SUM(o.total_amount) AS total_sales
FROM 
    Orders o
GROUP BY 
    sales_month
ORDER BY 
    sales_month ASC;
-- 4. Inventory Management: Check Low-Stock Products
-- Query: Identify products that are running low in stock (assuming stock is tracked in the Products table with a stock_quantity column).

SELECT 
    product_id, 
    name AS product_name, 
    stock_quantity
FROM 
    Products
WHERE 
    stock_quantity < 10
ORDER BY 
    stock_quantity ASC;

-- 5. Sales Optimization: Revenue Contribution by Product Category
-- Query: Calculate the total revenue generated by each product category.

SELECT 
    p.category, 
    SUM(od.quantity * od.price_per_unit) AS total_revenue
FROM 
    Products p
JOIN 
    OrderDetails od ON p.product_id = od.product_id
GROUP BY 
    p.category
ORDER BY 
    total_revenue DESC;

-- 6.  Customer Insights: Identify High-Spending Customers
-- Query: List the top 5 customers based on total spending.

SELECT 
    c.customer_id, 
    c.name AS customer_name, 
    SUM(o.total_amount) AS total_spent
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.name
ORDER BY 
    total_spent DESC
LIMIT 5;

-- 7. Product Analysis: Products That Have Never Been Sold
-- Query: Find products that have no associated sales in the OrderDetails table.

SELECT 
    p.product_id, 
    p.name AS product_name
FROM 
    Products p
LEFT JOIN 
    OrderDetails od ON p.product_id = od.product_id
WHERE 
    od.product_id IS NULL;
-- 8. Inventory Management: Identify Overstocked Products
-- Query: List products with stock levels exceeding 500 units.

SELECT 
    product_id, 
    name AS product_name, 
    stock_quantity
FROM 
    Products
WHERE 
    stock_quantity > 500
ORDER BY 
    stock_quantity DESC;

-- 9. Sales Optimization: Daily Sales Report
-- Query: Generate a report showing daily total sales.

SELECT 
    o.order_date, 
    SUM(o.total_amount) AS daily_sales
FROM 
    Orders o
GROUP BY 
    o.order_date
ORDER BY 
    o.order_date ASC;

-- 10. Customer Insights: Customer Orders Summary
-- Query: Count the number of orders placed by each customer.

SELECT 
    c.customer_id, 
    c.name AS customer_name, 
    COUNT(o.order_id) AS total_orders
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.name
ORDER BY 
    total_orders DESC;






